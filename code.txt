--1 home.py
import streamlit as st
import mysql.connector
from streamlit_extras.add_vertical_space import add_vertical_space
from streamlit_extras.switch_page_button import switch_page

# Connect to the database
mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="password",
  database="dbname"
)

st.set_page_config(
    page_title="Login App",
    page_icon="üëã",
    initial_sidebar_state="collapsed"
)
col11, col12 = st.columns((2,10))

st.text('''
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

''')
# st.title("Air Traffic Control System")
# Create a new table to store user accounts
mycursor = mydb.cursor()
mycursor.execute("CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255), password VARCHAR(255), email VARCHAR(255))")

# st.title("Login")
username = st.text_input("Username")
password = st.text_input("Password", type="password")

col3, col4 = st.columns((2,10))

# Check if the user has submitted the form
if col3.button("Login"):
        # Retrieve the user's data from the database
        sql = "SELECT * FROM users WHERE username = %s AND password = %s"
        val = (username, password)
        mycursor.execute(sql, val)
        result = mycursor.fetchone()

        # Check if the login credentials are correct
        if result:
            st.success("You have successfully logged in!")
            switch_page("load")

        else:
            st.error("Invalid username or password")

if col4.button("Register"):
        switch_page("register")

--2 register.py
import streamlit as st
import mysql.connector
from streamlit_extras.add_vertical_space import add_vertical_space
from streamlit_extras.switch_page_button import switch_page


mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  password="password",
  database="dbname"
)


mycursor = mydb.cursor()
mycursor.execute("CREATE TABLE IF NOT EXISTS users (id INT AUTO_INCREMENT PRIMARY KEY, username VARCHAR(255), password VARCHAR(255), email VARCHAR(255))")


st.title("Registration")
username = st.text_input("Username")
password = st.text_input("Password", type="password")
email = st.text_input("Email")
    # Check if the user has submitted the form
if st.button("Register"):
        # Insert the user's data into the database
        sql = "INSERT INTO users (username, password, email) VALUES (%s, %s, %s)"
        val = (username, password, email)
        mycursor.execute(sql, val)
        mydb.commit()
        switch_page("home")
        # Show a confirmation message
        st.success("You have successfully registered!")

--3 load.py
import streamlit as st
import mysql.connector
import pandas as pd
from streamlit_extras.switch_page_button import switch_page


# # Connect to the MySQL database
cnx = mysql.connector.connect(user='root', password='password',
                              host='localhost', database='dbname')
cursor = cnx.cursor()
create_table_query = '''CREATE TABLE IF NOT EXISTS flight_info (
                            flight_id INT NOT NULL AUTO_INCREMENT,
                            flight_number VARCHAR(10) NOT NULL,
                            airline VARCHAR(50) NOT NULL,
                            origin VARCHAR(50) NOT NULL,
                            destination VARCHAR(50) NOT NULL,
                            departure_time DATETIME NOT NULL,
                            eta DATETIME NOT NULL,
                            ata DATETIME NOT NULL,
                            altitude INT NOT NULL,
                            speed INT NOT NULL,
                            aircraft_type VARCHAR(50) NOT NULL,
                            heading INT NOT NULL,
                            departure_gate VARCHAR(10) NOT NULL,
                            arrival_gate VARCHAR(10) NOT NULL,
                            status VARCHAR(50) NOT NULL,
                            runway_number VARCHAR(10) NOT NULL,
                            controller_id INT NOT NULL,
                            controller_name VARCHAR(50) NOT NULL,
                            sector VARCHAR(50) NOT NULL,
                            PRIMARY KEY (flight_id)
                        )'''
cursor.execute(create_table_query)
cnx.commit()


# if st.button("Add records"):
#         switch_page("insert")

def home_page():
    st.title("Flight Information Management")
    st.write("Welcome to the Flight Information Management System!")

    if st.button("Insert Records"):
        switch_page("insert")
    if st.button("Show  Records"):
            switch_page("show")
    if st.button("Update Records"):
            switch_page("delete")
def main():
    home_page()

if __name__ == "__main__":
    main()

--4 insert.py
import streamlit as st
import mysql.connector
import pandas as pd
from streamlit_extras.switch_page_button import switch_page


# # Connect to the MySQL database
cnx = mysql.connector.connect(user='root', password='password',
                              host='localhost', database='dbname')
cursor = cnx.cursor()
create_table_query = '''CREATE TABLE IF NOT EXISTS flight_info (
                            flight_id INT NOT NULL AUTO_INCREMENT,
                            flight_number VARCHAR(10) NOT NULL,
                            airline VARCHAR(50) NOT NULL,
                            origin VARCHAR(50) NOT NULL,
                            destination VARCHAR(50) NOT NULL,
                            departure_time DATETIME NOT NULL,
                            eta DATETIME NOT NULL,
                            ata DATETIME NOT NULL,
                            altitude INT NOT NULL,
                            speed INT NOT NULL,
                            aircraft_type VARCHAR(50) NOT NULL,
                            heading INT NOT NULL,
                            departure_gate VARCHAR(10) NOT NULL,
                            arrival_gate VARCHAR(10) NOT NULL,
                            status VARCHAR(50) NOT NULL,
                            runway_number VARCHAR(10) NOT NULL,
                            controller_id INT NOT NULL,
                            controller_name VARCHAR(50) NOT NULL,
                            sector VARCHAR(50) NOT NULL,
                            PRIMARY KEY (flight_id)
                        )'''
cursor.execute(create_table_query)
cnx.commit()


col1, col2 = st.columns(2)
col3, col4 = st.columns((2,10))
col5, col6 = st.columns((2,10))


# Add input fields to each column
with col1:
    flight_id = st.text_input("Flight ID")

with col2:
    flight_number = st.text_input("Flight Number")

with col1:
    airline = st.text_input("Airline")

with col2:
    origin = st.text_input("Origin")

with col1:
    destination = st.text_input("Destination")

with col2:
    departure_time = st.text_input("Departure Time")

with col1:
    eta = st.text_input("Estimated Time of Arrival")

with col2:
    ata = st.text_input("Actual Time of Arrival")

with col1:
    altitude = st.text_input("Altitude")

with col2:
    speed = st.text_input("Speed")

with col1:
    aircraft_type = st.text_input("Aircraft Type")

with col2:
    heading = st.text_input("Heading")

with col1:
    departure_gate = st.text_input("Departure Gate")

with col2:
    arrival_gate = st.text_input("Arrival Gate")

with col1:
    status = st.text_input("Status")

with col2:
    runway_number = st.text_input("Runway Number")

with col1:
    controller_id = st.text_input("Air Traffic Controller ID")

with col2:
    controller_name = st.text_input("Air Traffic Controller Name")

with col1:
    sector = st.text_input("Sector")


cursor=cnx.cursor()
# When the user clicks the "Submit" button, create a dictionary with the flight information

with col3:
    if st.button("Submit"):
        sql = "INSERT INTO flight_info (flight_number, airline, origin, destination, departure_time, eta, ata, altitude, speed, aircraft_type, heading, departure_gate, arrival_gate, status, runway_number, controller_id, controller_name, sector) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
        values = (flight_number, airline, origin, destination, departure_time, eta, ata, altitude, speed, aircraft_type, heading, departure_gate, arrival_gate, status, runway_number, controller_id, controller_name, sector)
        cursor.execute(sql, values)
        cnx.commit()
        st.success("Data successfully inserted into table.")
        data = {
            'Flight ID': [flight_id],
            'Flight Number': [flight_number],
            'Airline': [airline],
            'Origin': [origin],
            'Destination': [destination],
            'Departure Time': [departure_time],
            'Estimated Time of Arrival': [eta],
            'Actual Time of Arrival': [ata],
            'Altitude': [altitude],
            'Speed': [speed],
            'Aircraft Type': [aircraft_type],
            'Heading': [heading],
            'Departure Gate': [departure_gate],
            'Arrival Gate': [arrival_gate],
            'Status': [status],
            'Runway Number': [runway_number],
            'Air Traffic Controller ID': [controller_id],
            'Air Traffic Controller Name': [controller_name],
            'Sector': [sector]
        }
        # Create a Pandas DataFrame from the dictionary and display it as a table
        df = pd.DataFrame(data)
        pd.set_option('display.max_rows', 1000)
        pd.set_option('display.max_columns', 1000)
        st.dataframe(df)
    if col4.button('Show'):
        switch_page("show")

--5 show.py
import streamlit as st
import mysql.connector
import pandas as pd
from streamlit_extras.add_vertical_space import add_vertical_space
from streamlit_extras.switch_page_button import switch_page

cnx = mysql.connector.connect(user='root', password='password',
                              host='localhost', database='dbname')
cursor=cnx.cursor()

select_query = "SELECT flight_id, flight_number, airline, origin, destination,departure_time, eta, ata, altitude, speed, aircraft_type, heading, departure_gate, arrival_gate, status, runway_number, controller_id, controller_name, sector FROM flight_info"
cursor.execute(select_query)
data = cursor.fetchall()
st.write("Data Entries")
if len(data) > 0:
    cols = ['Flight_Id', 'Flight_Number', 'Airline', 'Origin', 'Destination','Departure_Time', 'ETA', 'ATA', 'Altitude', 'Speed', 'Aircraft_Type', 'Heading', 'Departure_Gate', 'Arrival_Gate', 'Status', 'Runaway_Number', 'Controller_Id', 'Controller_Name', 'Sector']
    df = pd.DataFrame(data, columns=cols)
    st.dataframe(df)
else:
    st.warning('No data entries found.')

if st.button('‚Ü©'):
    switch_page('load')

--6 delete.py
import streamlit as st
import mysql.connector
import pandas as pd
from streamlit_extras.switch_page_button import switch_page


# # Connect to the MySQL database
cnx = mysql.connector.connect(user='root', password='password',
                              host='localhost', database='dbname')
cursor = cnx.cursor()
create_table_query = '''CREATE TABLE IF NOT EXISTS flight_info (
                            flight_id INT NOT NULL AUTO_INCREMENT,
                            flight_number VARCHAR(10) NOT NULL,
                            airline VARCHAR(50) NOT NULL,
                            origin VARCHAR(50) NOT NULL,
                            destination VARCHAR(50) NOT NULL,
                            departure_time DATETIME NOT NULL,
                            eta DATETIME NOT NULL,
                            ata DATETIME NOT NULL,
                            altitude INT NOT NULL,
                            speed INT NOT NULL,
                            aircraft_type VARCHAR(50) NOT NULL,
                            heading INT NOT NULL,
                            departure_gate VARCHAR(10) NOT NULL,
                            arrival_gate VARCHAR(10) NOT NULL,
                            status VARCHAR(50) NOT NULL,
                            runway_number VARCHAR(10) NOT NULL,
                            controller_id INT NOT NULL,
                            controller_name VARCHAR(50) NOT NULL,
                            sector VARCHAR(50) NOT NULL,
                            PRIMARY KEY (flight_id)
                        )'''
cursor.execute(create_table_query)
cnx.commit()


col1, col2 = st.columns(2)
select_query = "SELECT flight_id, flight_number, airline, origin, destination,departure_time, eta, ata, altitude, speed, aircraft_type, heading, departure_gate, arrival_gate, status, runway_number, controller_id, controller_name, sector FROM flight_info"
cursor.execute(select_query)
data = cursor.fetchall()
for row in data:
    with st.expander(row[2]):
      with st.form(f'ID-{row[0]}'):
        flight_id = st.text_input("Flight ID",row[0])
        flight_number = st.text_input("Flight Number",row[1])
        airline = st.text_input("Airline",row[2])
        origin = st.text_input("Origin",row[3])
        destination = st.text_input("Destination",row[4])
        departure_time = st.text_input("Departure Time",row[5])
        eta = st.text_input("Estimated Time of Arrival",row[6])
        ata = st.text_input("Actual Time of Arrival",row[7])
        altitude = st.text_input("Altitude",row[8])
        speed = st.text_input("Speed",row[9])
        aircraft_type = st.text_input("Aircraft Type",row[10])
        heading = st.text_input("Heading",row[11])
        departure_gate = st.text_input("Departure Gate",row[12])
        arrival_gate = st.text_input("Arrival Gate",row[13])
        status = st.text_input("Status",row[14])
        runway_number = st.text_input("Runway Number",row[15])
        controller_id = st.text_input("Air Traffic Controller ID",row[16])
        controller_name = st.text_input("Air Traffic Controller Name",row[17])
        sector = st.text_input("Sector",row[18])
        if st.form_submit_button('Save'):
            update_query = "UPDATE flight_info SET flight_number=%s, airline=%s, origin=%s, destination=%s, departure_time=%s, eta=%s, ata=%s, altitude=%s, speed=%s, aircraft_type=%s, heading=%s, departure_gate=%s, arrival_gate=%s, status=%s, runway_number=%s, controller_id=%s, controller_name=%s, sector=%s WHERE flight_id=%s"
            cursor.execute(update_query, (flight_number, airline, origin, destination, departure_time, eta, ata, altitude, speed, aircraft_type, heading, departure_gate, arrival_gate, status, runway_number, controller_id, controller_name, sector, flight_id))
            cnx.commit()

        if st.form_submit_button('Delete'):
            cursor.execute(f'DELETE FROM flight_info WHERE flight_id ="{row[0]}";')
            cnx.commit()
